#!/usr/bin/python
# File:  option_generation
# Author:  mikolas
# Created on:  Mon, Feb 27, 2012 3:06:02 PM
# Copyright (C) 2012, Mikolas Janota

import sys

class Option:
  def __init__ (self, identifier, short_option, has_arguments, description):
    self.identifier = identifier
    self.short_option = short_option
    self.has_arguments = has_arguments
    self.description = description
    self.default = 0

class Options:
  def __init__ (self, name):
    self.name = name
    self.options = [] 

  def add_short_option(self, identifier, short_option, has_arguments, description):
    self.options.append( Option(identifier,short_option, has_arguments, description) )

  def add_short_non_arg_option(self, identifier, short_option, description):
    self.add_short_option(identifier,short_option, False, description)

def generate(options, output_hh, output_cc):
  preprocessor_id = options.name+'_HH'
  print('#ifndef', preprocessor_id, file=output_hh) 
  print('#define', preprocessor_id, file=output_hh) 
  print('#include <string>', file=output_hh)
  print('#include <vector>', file=output_hh)
  print('#include <ostream>', file=output_hh)
  print('using std::string;', file=output_hh)
  print('class', options.name, '{', file=output_hh)
  print('public:', file=output_hh)
  print('bool parse(int argc,char **argv);', file=output_hh)
  print(' ', options.name, '()', file=output_hh)
  for i in range(len(options.options)):
    print(' ', (':' if i==0 else ','), end=' ', file=output_hh)
    o=options.options[i]
    print(o.identifier, '(', o.default , ')', file=output_hh)
  print('  {}', file=output_hh)

  print('  const std::vector<string>&    get_rest() const { return rest; }', file=output_hh)
  print('  std::ostream&                 print(std::ostream& out) const;', file=output_hh)
  for o in options.options:
    print('  int                         get_'+o.identifier+'() const', '{ return', o.identifier, ';}', file=output_hh)
    if o.has_arguments: print('  string                      get_'+o.identifier+'_arg() const { return', o.identifier+'_arg', ';}', file=output_hh) 
  print('  friend std::ostream& operator << (std::ostream& out, const '+options.name+'& opt);', file=output_hh)
    
  print('private:', file=output_hh)
  print('  std::vector<string> rest;', file=output_hh)
  for o in options.options:
    print('  int',  o.identifier, ';', file=output_hh)
    if o.has_arguments: print('  string',  o.identifier+'_arg', ';', file=output_hh)
  print('};', file=output_hh)
  print('#endif', file=output_hh)

  # ---------------------------------------------------

  option_format_string = ''
  for o in options.options:
    option_format_string = option_format_string + o.short_option[1]
    if o.has_arguments: option_format_string=option_format_string+':'
  print('#include <iostream>', file=output_cc)
  print('#include <stdlib.h>', file=output_cc)
  print('#include <getopt.h>', file=output_cc)
  print('#include <stdio.h>', file=output_cc)
  print('using std::ostream;', file=output_cc)
  print('using std::endl;', file=output_cc)
  print('#include', '"'+options.name+'.hh"', file=output_cc)
  print('bool',  options.name+'::parse(int argc,char **argv) {', file=output_cc)
  print('  static struct option long_options[] = {{0, 0, 0, 0}};', file=output_cc)
  print('  int c;', file=output_cc)
  print('  bool return_value = true;', file=output_cc)
  print('  while (1) {', file=output_cc)
  print('    int option_index = 0;', file=output_cc)
  print('    c = getopt_long(argc, argv, "'+option_format_string+'", long_options, &option_index);', file=output_cc)
  print('    if (c == -1) break;', file=output_cc)
  print('    switch (c) {', file=output_cc)
  for o in options.options:
    print('    case \''+o.short_option[1]+'\':', file=output_cc)
    print('      ++'+o.identifier+';', file=output_cc)
    if o.has_arguments: print('      '+o.identifier+'_arg = optarg;', file=output_cc)
    print('      break;', file=output_cc)

  print('    case \'?\':', file=output_cc)
  print('      // if (isprint(optopt)) fprintf (stderr, "Unknown option -%c.\\n", optopt);', file=output_cc)
  print('      return_value = false;', file=output_cc)
  print('      break;', file=output_cc)
  print('    }', file=output_cc)
  print('  }', file=output_cc)
  print('  for (int i=optind; i<argc; ++i) rest.push_back(argv[i]);', file=output_cc)
  print('  return return_value;', file=output_cc)
  print('}', file=output_cc)

#
  print('ostream&',  options.name+'::print(ostream& out) const {', file=output_cc)
  for o in options.options:
    print('  out<< "',o.short_option,'";', file=output_cc)
    if (o.has_arguments): print('  out<< " ARG";', file=output_cc)
    print('  out<< "    "<<"',o.description,'";', file=output_cc)
    print('  out<< endl;', file=output_cc)
  print('  return out;', file=output_cc)
  print('}', file=output_cc)

#
  print('ostream& operator << (ostream& out, const '+options.name+'& opt) {', file=output_cc)
  print('  out << "c options: ";', file=output_cc)
  for o in options.options:
    print('  if(opt.get_'+o.identifier+'()) out << "'+o.short_option+' ";', file=output_cc)
  print('  return out;', file=output_cc)
  print('}', file=output_cc)

def main():
  options = Options("Options")
  options.add_short_non_arg_option('verbose','-v','verbosity level')
  options.add_short_non_arg_option('help','-h','print help')
  #options.add_short_non_arg_option('mss','-s','find MSS when looking for candidate')
  #options.add_short_non_arg_option('cex_mss','-c','find MSS when looking for counterexample')
  #options.add_short_non_arg_option('resdep','-r','add resolution dependencis')
  #options.add_short_non_arg_option('use_varsplit','-t','use var splitter')
  #options.add_short_non_arg_option('use_dismcs','-d','use disjoint MCSes')
  options.add_short_non_arg_option('ex_inst','-e','use existential instantiation')
  #options.add_short_non_arg_option('luby_rest','-l','use luby restarts')
  #options.add_short_non_arg_option('dir1_enc','-1','enc of var only in 1 dir')
  options.add_short_non_arg_option('groups','-g','merge clauses into groups')
  #options.add_short_non_arg_option('smax','-m','in -1 mode, try rectify the setting of selection variables')
  #options.add_short_non_arg_option('bump','-b','sel vars bumping')
  #options.add_short_non_arg_option('varelim','-a','variable elimination')
  options.add_short_non_arg_option('lazy','-y','lazy var encoding')
  options.add_short_non_arg_option('pin','-u','cube distribution please combind this command with -w')
  options.add_short_non_arg_option('weak_pri','-p','weak decision priority')
  options.add_short_non_arg_option('strong_pri','-n','universal analysis strengthening')
  options.add_short_non_arg_option('pin_pol','-w','please combined this command with -u')
  options.add_short_non_arg_option('cert','-k','generate certification function (_s.blif/_h.blif)')
  options.add_short_non_arg_option('cert2Mfs','-m','generate onsets and caresets of certification function (_ms.blif/_mf.blif)')
  #options.add_short_non_arg_option('cert_verify','-f','supply a \'bad_cert\' signal to verify the certification')
  options.add_short_non_arg_option('ssat','-s','ssat solving with clause selection')
  options.add_short_non_arg_option('cache','-c','enable caching results')
  options.add_short_non_arg_option('partial','-t','enable partial assignment pruning')
  options.add_short_non_arg_option('dynamic','-d','enable dynamic dropping')
  options.add_short_non_arg_option('increMC', '-i', 'enable incremental model counting')
  options.add_short_non_arg_option('disjointCube', '-z', 'enable disjoint cube cover')



###
  generate(options, sys.stdout, sys.stderr)

# main
main()
